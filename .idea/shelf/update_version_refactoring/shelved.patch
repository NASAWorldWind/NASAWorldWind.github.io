Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"nasaworldwind-gh-pages-updater\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Utility to facilitate continous integration servies in updating the website with the latest versions of World Wind projects\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Warning: no test specified or executed\\\" && exit 0\",\n    \"build\": \"node update-versions.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/NASAWorldWind/NASAWorldWind.github.io\"\n  },\n  \"author\": \"World Wind Development Team\",\n  \"license\": \"SEE LICENSE IN LICENSE.txt\",\n  \"bugs\": {\n    \"url\": \"https://github.com/NASAWorldWind/NASAWorldWind.github.io/issues\"\n  },\n  \"homepage\": \"https://github.com/NASAWorldWind/NASAWorldWind.github.io#readme\"\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision a361c0a860c7807d371f8391c53385179af6fd1b)
+++ package.json	(revision )
@@ -1,19 +1,24 @@
 {
   "name": "nasaworldwind-gh-pages-updater",
   "version": "0.1.0",
-  "description": "Utility to facilitate continous integration servies in updating the website with the latest versions of World Wind projects",
+  "description": "Utility to facilitate a continous integration service for updating the website with the latest versions of World Wind projects",
   "scripts": {
-    "test": "echo \"Warning: no test specified or executed\" && exit 0",
+    "test": "echo \"Warning: no test specified\" && exit 0",
     "build": "node update-versions.js"
   },
   "repository": {
     "type": "git",
-    "url": "git+https://github.com/NASAWorldWind/NASAWorldWind.github.io"
+    "url": "git+https://github.com/NASAWorldWind/NASAWorldWind.github.io.git"
   },
-  "author": "World Wind Development Team",
-  "license": "SEE LICENSE IN LICENSE.txt",
+  "author": "",
+  "license": "SEE LICENSE IN LICENSE.md",
   "bugs": {
     "url": "https://github.com/NASAWorldWind/NASAWorldWind.github.io/issues"
   },
-  "homepage": "https://github.com/NASAWorldWind/NASAWorldWind.github.io#readme"
+  "homepage": "https://github.com/NASAWorldWind/NASAWorldWind.github.io#readme",
+  "dependencies" : {
+    "request" : "^2.81.0",
+    "extract-zip" : "^1.6.5",
+    "rimraf": "^2.6.1"
+  }
 }
Index: update-versions.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\n * Copyright (c) 2017 United States Government as represented by the Administrator of the\n * National Aeronautics and Space Administration. All Rights Reserved.\n */\n\nvar https = require('https');\nvar fs = require('fs');\n\n// Define the Maven based repositories for which version information needs to be retrieved\nvar mavenRepos = [\n    {\n        'name' : 'World Wind Android', // Log friendly display name\n        'assetDirectory' : 'android', // Directory name for this project in the assets directory of the website\n        'bintrayPackageName' : 'WorldWindAndroid',\n        'bintrayOrganization' : 'nasaworldwind',\n        'bintrayRepository' : 'maven',\n        'groupId' : 'gov.nasa.worldwind.android',\n        'artifactId' : 'worldwind'\n    }\n]\n\npopulateMavenVersionValues(mavenRepos);\n\nfunction populateMavenVersionValues (repos) {\n    // Iterate through the Maven repositories and add the version returns\n    var i, repo, replacementValue, bintrayUrl, ojoUrl;\n    for (i = 0; i < repos.length; i++) {\n        repo = repos[i];\n        // Populate Bintray url\n        replacementValue = repo.bintrayOrganization + '/' + repo.bintrayRepository + '/' + repo.bintrayPackageName;\n        bintrayUrl = 'https://api.bintray.com/packages/' + replacementValue + '/versions/_latest';\n        retrieveResults(bintrayUrl, repo, bintrayMavenComplete);\n        // Populate OJO url\n        replacementValue = repo.groupId + '&a=' + repo.artifactId;\n        ojoUrl = 'https://oss.jfrog.org/artifactory/api/search/versions?g=' + replacementValue + '&repos=oss-snapshot-local';\n        retrieveResults(ojoUrl, repo, ojoMavenComplete);\n    }\n};\n\n// The callback which will occur upon successful version retrieval from the API\nfunction bintrayMavenComplete (repo, result) {\n    if (result.name) {\n        // The response from the server is valid, write a new version file\n        writeToAssetsDirectory('./assets/' + repo.assetDirectory + '/latestBintrayVersion.json', result);\n    } else {\n        console.error('The Bintray API return for ' + repo.name + ' was not in the expected format.');\n    }\n};\n\nfunction ojoMavenComplete (repo, result) {\n    if (result.results[0].version) {\n        // The response from the server is valid, write a new version file\n        writeToAssetsDirectory('./assets/' + repo.assetDirectory + '/latestOjoVersion.json', result);\n    } else {\n        console.error('The OJO API return for ' + updatedRepo.name + ' was not in the expected format.');\n    }\n};\n\nfunction retrieveResults (url, repo, callback) {\n\n    https.get(url, function (res) {\n        const { statusCode } = res;\n        const contentType = res.headers['content-type'];\n\n        if (statusCode !== 200) {\n            let error = new Error(`Request Failed for ${repo.name} to ${url}.\\n` +\n                            `Status Code: ${statusCode}`);\n            console.error(error.message);\n            // consume response data to free up memory\n            res.resume();\n            return;\n        }\n        \n        res.setEncoding('utf8');\n        let rawData = '';\n        res.on('data', (chunk) => { rawData += chunk; });\n        res.on('end', () => {\n            try {\n                const parsedData = JSON.parse(rawData);\n                callback(repo, parsedData);\n            } catch (e) {\n                console.error(e.message);\n            }\n        });\n    }).on('error', function(e0) {\n        console.error(`Got error: ${e.message}`);\n    });\n};\n\nfunction writeToAssetsDirectory (path, contents) {\n    fs.writeFile(path, JSON.stringify(contents), function(err) {\n        if (err) {\n            console.error(`Could not write: ${path} because ${err}`);\n        } else {\n            console.log(`Updated the ${path} file.`);\n        }\n    });\n};
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- update-versions.js	(revision a361c0a860c7807d371f8391c53385179af6fd1b)
+++ update-versions.js	(revision )
@@ -3,96 +3,109 @@
  * National Aeronautics and Space Administration. All Rights Reserved.
  */
 
-var https = require('https');
-var fs = require('fs');
+var https = require('https'),
+    fs = require('fs'),
+    request = require('request'),
+    extract = require('extract-zip'),
+    rimraf = require('rimraf');
 
-// Define the Maven based repositories for which version information needs to be retrieved
-var mavenRepos = [
-    {
-        'name' : 'World Wind Android', // Log friendly display name
-        'assetDirectory' : 'android', // Directory name for this project in the assets directory of the website
-        'bintrayPackageName' : 'WorldWindAndroid',
-        'bintrayOrganization' : 'nasaworldwind',
-        'bintrayRepository' : 'maven',
-        'groupId' : 'gov.nasa.worldwind.android',
-        'artifactId' : 'worldwind'
+// Update the Android Bintray version information if the version available from Bintray is different than the assets currently available
+var androidBintray = 'https://api.bintray.com/packages/nasaworldwind/maven/WorldWindAndroid/versions/_latest';
+request(androidBintray, function(err, response, body) {
+    if (err) {
+        console.error(err);
+        return;
     }
-]
-
-populateMavenVersionValues(mavenRepos);
-
-function populateMavenVersionValues (repos) {
-    // Iterate through the Maven repositories and add the version returns
-    var i, repo, replacementValue, bintrayUrl, ojoUrl;
-    for (i = 0; i < repos.length; i++) {
-        repo = repos[i];
-        // Populate Bintray url
-        replacementValue = repo.bintrayOrganization + '/' + repo.bintrayRepository + '/' + repo.bintrayPackageName;
-        bintrayUrl = 'https://api.bintray.com/packages/' + replacementValue + '/versions/_latest';
-        retrieveResults(bintrayUrl, repo, bintrayMavenComplete);
-        // Populate OJO url
-        replacementValue = repo.groupId + '&a=' + repo.artifactId;
-        ojoUrl = 'https://oss.jfrog.org/artifactory/api/search/versions?g=' + replacementValue + '&repos=oss-snapshot-local';
-        retrieveResults(ojoUrl, repo, ojoMavenComplete);
-    }
-};
-
-// The callback which will occur upon successful version retrieval from the API
-function bintrayMavenComplete (repo, result) {
-    if (result.name) {
-        // The response from the server is valid, write a new version file
-        writeToAssetsDirectory('./assets/' + repo.assetDirectory + '/latestBintrayVersion.json', result);
+    // Set the absolute path to the assets folder, the extract-zip module requires absolute paths
+    let assetsPath = process.cwd() + '/assets/android/';
+    // Only update if the return is in the expected format AND there is a version difference from the stored version
+    let bintrayLatestVersion = JSON.parse(body);
+    let storedBintrayLatestVersion;
+    if (fs.existsSync(assetsPath + '/latestBintrayVersion.json')) {
+        storedBintrayLatestVersion = JSON.parse(fs.readFileSync(assetsPath + 'latestBintrayVersion.json', 'utf8'));
     } else {
-        console.error('The Bintray API return for ' + repo.name + ' was not in the expected format.');
+        // a stored Bintray version isn't in the expected place, populate the object with a dummy value
+        storedBintrayLatestVersion = {name: 'does not exist'};
     }
-};
-
-function ojoMavenComplete (repo, result) {
-    if (result.results[0].version) {
-        // The response from the server is valid, write a new version file
-        writeToAssetsDirectory('./assets/' + repo.assetDirectory + '/latestOjoVersion.json', result);
-    } else {
-        console.error('The OJO API return for ' + updatedRepo.name + ' was not in the expected format.');
+    if (bintrayLatestVersion.name && bintrayLatestVersion.name != storedBintrayLatestVersion.name) {
+        fs.writeFile(assetsPath + '/latestBintrayVersion.json', body, function(err) {
+            if (err) {
+                console.error(err);
+            } else {
+                console.log('Updated the latestBintrayVersion.json file');
+                // Attempt to retrieve the javadoc.jar, unzip, and replace the current directory contents
+                let javadocUrl = 'https://jcenter.bintray.com/gov/nasa/worldwind/android/worldwind/' + bintrayLatestVersion.name
+                    + '/worldwind-' + bintrayLatestVersion.name + '-javadoc.jar';
+                // If at any point this operation fails, it will exit the nodejs build in order to prevent erroneous pages deployment
+                updateJavadocs(assetsPath, javadocUrl);
+            }
+        });
+    } else {
+        if (bintrayLatestVersion.name) {
+            console.log('Latest Bintray version matches stored contents. No update.');
+        } else {
+            console.error('Unexpected Bintray API response: ' + body);
+        }
     }
-};
+});
 
-function retrieveResults (url, repo, callback) {
-
-    https.get(url, function (res) {
-        const { statusCode } = res;
-        const contentType = res.headers['content-type'];
-
-        if (statusCode !== 200) {
-            let error = new Error(`Request Failed for ${repo.name} to ${url}.\n` +
-                            `Status Code: ${statusCode}`);
-            console.error(error.message);
-            // consume response data to free up memory
-            res.resume();
-            return;
-        }
-        
-        res.setEncoding('utf8');
-        let rawData = '';
-        res.on('data', (chunk) => { rawData += chunk; });
-        res.on('end', () => {
-            try {
-                const parsedData = JSON.parse(rawData);
-                callback(repo, parsedData);
-            } catch (e) {
-                console.error(e.message);
-            }
-        });
-    }).on('error', function(e0) {
-        console.error(`Got error: ${e.message}`);
-    });
-};
-
-function writeToAssetsDirectory (path, contents) {
-    fs.writeFile(path, JSON.stringify(contents), function(err) {
-        if (err) {
-            console.error(`Could not write: ${path} because ${err}`);
-        } else {
-            console.log(`Updated the ${path} file.`);
+// Update the Android OJO version information
+var androidOjo = 'https://oss.jfrog.org/artifactory/api/search/versions?g=gov.nasa.worldwind.android&a=worldwind&repos=oss-snapshot-local';
+request(androidOjo, function(err, response, body) {
+    if (err) {
+        console.error(err);
+        return;
+    }
+    let ojoLatestVersion = JSON.parse(body);
+    // Check that the returned format is as expected
+    if (ojoLatestVersion.results && ojoLatestVersion.results.length > 0 && ojoLatestVersion.results[0].version) {
+        fs.writeFile('assets/android/latestOjoVersion.json', body, function(err) {
+            if (err) {
+                console.error(err);
+            } else {
+                console.log('Updated the latestOjoVersion.json file');
+            }
+        });
+    } else {
+        console.error('Unexpected OJO API response: ' + body);
+    }
+});
+
+// Function to update the documentation, called by the initial Bintray API request if the version is different than the stored version.
+// This function will remove any existing files in the provided path before unzipping the updated docs.
+function updateJavadocs(assetsPath, javadocUrl) {
+    console.log('the assets path: ' + assetsPath);
+    // remove existing documentation from the directory
+    rimraf(assetsPath + '/latest/javadoc', function(error) {
+        if (error) {
+            console.error(error);
+            // Interupt the website build, we don't want to push an incomplete website
+            process.exit(1);
         }
+        // Retrieve latest docs
+        request({url: javadocUrl, encoding: null}, function (err, resp, body) {
+            fs.writeFile(assetsPath + '/javadoc.zip', body, function(err) {
+                if (err) {
+                    console.error(err);
+                    // Interupt the website build, we don't want to push an incomplete website
+                    process.exit(1);
+                }
+                extract(assetsPath + '/javadoc.zip', {dir: assetsPath + '/latest/javadoc/'}, function(err) {
+                    if (err) {
+                        console.error(err);
+                        // Interupt the website build, we don't want to push an incomplete website
+                        process.exit(1);
+                    } else {
+                        console.log('Javadocs directory: ' + assetsPath + '/latest/javadoc' + ' updated successfully');
+                        // delete the javadoc zip file
+                        fs.unlink(assetsPath + '/javadoc.zip', function(err) {
+                            if (err) {
+                                console.error(err);
+                            }
+                        });
+                    }
+                });
+            });
+        });
     });
 };
\ No newline at end of file
